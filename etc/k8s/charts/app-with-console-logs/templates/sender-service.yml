apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: sender-service-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sender-service
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 25

---


apiVersion: v1
kind: Service
metadata:
  name: sender-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: sender-service

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sender-service
  labels:
    app: sender-service
spec:
  replicas: {{ .Values.applications.sender_service.replicas }}
  selector:
    matchLabels:
      app: sender-service
  template:
    metadata:
      annotations:
        prometheus/scrape_enabled: "true"
        prometheus/scrape_endpoint: "/actuator/prometheus"
        prometheus/scrape_port: "8080"
      labels:
        app: sender-service
    spec:
      containers:
        - name: sender-service
          image: "eshishkin/k8s-examples/sender-service:{{ .Values.applications.sender_service.tag }}"
          imagePullPolicy: {{ .Values.applications.sender_service.imagePullPolicy }}
          env:
            - name: JAVA_TOOL_OPTIONS
              value: -Xms128m -Xmx128m -XX:+UseContainerSupport -XX:+AlwaysActAsServerClassMachine -XX:+AlwaysPreTouch
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 1
              memory: 256Mi
